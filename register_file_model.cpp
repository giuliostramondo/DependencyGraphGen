#include "register_file_model.hpp"

std::map<int,std::map<int,std::pair<double,double>>> LinearModelArea_test={
    {1, { { 2 , { 3.0, 4.0 }} , {3 , {4.0,5.0}}}},
    {1, { { 2 , { 3.0, 4.0 }}}}
};
std::map<int,std::map<int,std::pair<double,double>>> LinearModelArea_16={
    {32, {{800, {38.07213005, 38.63783384}}, {1200, {38.05917005, 38.63783384}}, {2000, {39.12266765, 38.67515864}}, {1000, {38.06853828, 38.63761167}}, {1800, {38.91453005, 38.63783384}}, {400, {38.06600183, 38.63805601}}, {1400, {38.05917005, 38.63783384}}, {600, {38.06600183, 38.63805601}}, {1600, {38.05917005, 38.63783384}}}},
    { 64, {{800, {75.1639648, 75.37417649}}, {1200, {75.17596206, 75.37425055}}, {2000, {76.18495354, 75.37987889}},{ 1000, {75.17622126, 75.37373215}},{ 1800, {74.91081897, 75.42779386}},{ 400, {74.32517508, 75.53265878}}, {1400, {75.1637056, 75.37469489}}, {600, {74.62967954, 75.43371843}}, {1600, {75.18122011, 75.37484301}}}}
};
std::map<int,std::map<int,std::pair<double,double>>> LinearModelIdleEnergy_16={
{32, {{800, {0.00013357, 0.00014357}},{ 1200, {0.00010368, 9.44285714e-05}},{ 2000, {6.64285714e-05, 5.64285714e-05}}, {1000, {8.94642857e-05, 0.00011571}}, {1800, {5.48214286e-05, 6.35714286e-05}},{ 400, {0.00025514, 0.00028614}},{ 1400, {6.45714286e-05, 8.15714286e-05}},{ 600, {0.00015568, 0.00019043}},{ 1600, {8.25714286e-05, 7.05714286e-05}}}},{ 64, {{800, {0.0002465, 0.000282}},{ 1200, {0.00016057, 0.00018957}},{ 2000, {0.00010279, 0.00011229}},{ 1000, {0.00024475, 0.000223}},{ 1800, {0.00014475, 0.000123}},{ 400, {0.00051107, 0.00056357}},{ 1400, {0.00016004, 0.00016029}},{ 600, {0.00038039, 0.00037314}},{ 1600, {0.00013068, 0.00014043}}}}
};
std::map<int,std::map<int,std::pair<double,double>>> LinearModelActiveEnergy_16={
{32, {{800, {0.00928214, 0.00125714}},{ 1200, {0.01648214, 0.00185714}},{ 2000, {0.02941071, 0.00278571}}, {1000, {0.01561786, 0.00144286}}, {1800, {0.02550714, 0.00255714}},{ 400, {0.00757143, 0.00057143}},{ 1400, {0.01727857, 0.00222857}},{ 600, {0.007675, 0.0009}},{ 1600, {0.02315714, 0.00225714}}}}, {64, {{800, {0.01933929, 0.00221429}},{ 1200, {0.03988214, 0.00255714}}, {2000, {0.05706071, 0.00498571}}, {1000, {0.02731429, 0.00251429}},{ 1800, {0.05006429, 0.00451429}},{ 400, {0.0107, 0.0011}}, {1400, {0.04353571, 0.00328571}},{ 600, {0.016125, 0.0015}}, {1600, {0.04740714, 0.00375714}}}}
};

std::map<int,std::map<int,std::pair<double,double>>> LinearModelArea_28={{16, {{800, {50.72567981, 54.03863939}}, {1200, {50.72567981, 54.03863939}}, {2000, {56.06879976, 54.21239939}}, {1000, {50.72567981, 54.03863939}}, {1800, {50.72567981, 54.03863939}}, {400, {50.72567981, 54.03863939}}, {1400, {50.93447981, 54.02903939}}, {600, {50.70437981, 54.03623939}}, {1600, {50.93447981, 54.02903939}}}}, {32, {{800, {95.34569924, 104.07959886}}, {1200, {95.34569924, 104.07959886}}, {2000, {174.36071877, 104.28455885}}, {1000, {95.38883924, 104.08031886}}, {1800, {90.52607927, 106.41383884}}, {400, {95.56355924, 104.06687886}}, {1400, {95.36951924, 104.07695886}}, {600, {95.34569924, 104.07959886}}, {1600, {95.43677924, 104.07743886}}}}, {128, {{800, {370.37501659, 404.75495556}}, {1200, {370.0418966, 404.80319556}}, {2000, {355.52117691, 407.73263551}}, {1000, {369.91259659, 404.77679556}}, {1800, {371.34971642, 404.86655557}}, {400, {369.7249166, 404.88815556}}, {1400, {370.2505166, 404.80895556}}, {600, {369.5481566, 404.85167556}}, {1600, {369.9934766, 404.73503556}}}}, {64, {{800, {186.93293817, 204.24911778}}, {1200, {186.53555817, 204.27887778}}, {2000, {339.99179697, 201.1523978}}, {1000, {186.57473817, 204.28151778}}, {1800, {188.2262382, 204.26351777}}, {400, {186.67727817, 204.29543778}}, {1400, {186.76241817, 204.25415778}}, {600, {186.98807817, 204.26183778}}, {1600, {187.5873582, 204.25127777}}}}};

std::map<int,std::map<int,std::pair<double,double>>> LinearModelIdleEnergy_28={{16, {{800, {0.0049375, 0.00546875}}, {1200, {0.00330461, 0.00364524}}, {2000, {0.00218264, 0.00219364}}, {1000, {0.00395929, 0.00437429}}, {1800, {0.00219444, 0.00243056}}, {400, {0.009875, 0.0109375}}, {1400, {0.00282143, 0.003125}}, {600, {0.00658333, 0.00729167}}, {1600, {0.00246875, 0.00273437}}}}, {32, {{800, {0.00822143, 0.01083393}}, {1200, {0.00548095, 0.00722262}}, {2000, {0.00625864, 0.00434164}}, {1000, {0.00659639, 0.00866614}}, {1800, {0.00345754, 0.00491032}}, {400, {0.01649098, 0.02166536}}, {1400, {0.00469796, 0.00619082}}, {600, {0.0109619, 0.01444524}}, {1600, {0.00412275, 0.00541634}}}}, {128, {{800, {0.03170277, 0.04269714}}, {1200, {0.02077923, 0.02849214}}, {2000, {0.0122545, 0.017191}}, {1000, {0.02502114, 0.03417914}}, {1800, {0.01417087, 0.01898365}}, {400, {0.06306357, 0.08540857}}, {1400, {0.01790362, 0.02441469}}, {600, {0.0417019, 0.05696524}}, {1600, {0.01566567, 0.02136286}}}}, {64, {{800, {0.01861964, 0.02167589}}, {1200, {0.01092485, 0.01454464}}, {2000, {0.01283968, 0.00852243}}, {1000, {0.01366018, 0.01740643}}, {1800, {0.00726488, 0.00966071}}, {400, {0.0382067, 0.04321607}}, {1400, {0.01089094, 0.01235969}}, {600, {0.02380488, 0.02895571}}, {1600, {0.00816998, 0.0108442}}}}};

std::map<int,std::map<int,std::pair<double,double>>> LinearModelActiveEnergy_28={{16, {{800, {0.0066654, 0.00194244}}, {1200, {0.01008713, 0.00262683}}, {2000, {0.01856438, 0.00409223}}, {1000, {0.00775694, 0.00233339}}, {1800, {0.0166945, 0.00366554}}, {400, {0.00295303, 0.00128135}}, {1400, {0.0126595, 0.00295614}}, {600, {0.00467141, 0.00163899}}, {1600, {0.0153047, 0.00328018}}}}, {32, {{800, {0.01028243, 0.00424227}}, {1200, {0.01597501, 0.00572948}}, {2000, {0.05162049, 0.00838269}}, {1000, {0.01393058, 0.00487656}}, {1800, {0.02548109, 0.0080968}}, {400, {0.00343509, 0.00281561}}, {1400, {0.02119927, 0.00628789}}, {600, {0.00803657, 0.00346957}}, {1600, {0.02412603, 0.00683646}}}}, {128, {{800, {0.06164659, 0.01605256}}, {1200, {0.10659392, 0.02030077}}, {2000, {0.18182829, 0.03051015}}, {1000, {0.06783996, 0.02019222}}, {1800, {0.16210114, 0.02791136}}, {400, {0.03619711, 0.01038404}}, {1400, {0.1277512, 0.02363158}}, {600, {0.04420888, 0.01352417}}, {1600, {0.14389674, 0.02520401}}}}, {64, {{800, {0.03243609, 0.00786453}}, {1200, {0.04882348, 0.01027377}}, {2000, {0.12709487, 0.01568543}}, {1000, {0.03941035, 0.00924373}}, {1800, {0.06780944, 0.01484358}}, {400, {0.00929892, 0.00576566}}, {1400, {0.06410509, 0.0113079}}, {600, {0.02533715, 0.00654933}}, {1600, {0.05910055, 0.01348516}}}}};

double getFromModelRegisterFileArea(int bitwidth,int clock, int depth, int technology){
    double area_intercept;
    double area_slope;
    if(technology == 16){
        area_intercept = LinearModelArea_16[bitwidth][clock].first;
        area_slope = LinearModelArea_16[bitwidth][clock].second;
    }else{
        area_intercept = LinearModelArea_28[bitwidth][clock].first;
        area_slope = LinearModelArea_28[bitwidth][clock].second;
    }
    double area = area_intercept + area_slope * depth;
    //Take into account register file double buffering
    area*=2;
    return area;
}

double getFromModelRegisterFileIdleEnergy(int bitwidth,int clock, int depth, int technology){
    double idle_energy_intercept;
    double idle_energy_slope;
    
    if(technology == 16){
        idle_energy_intercept = LinearModelIdleEnergy_16[bitwidth][clock].first;
        idle_energy_slope = LinearModelIdleEnergy_16[bitwidth][clock].second;
    }else{
        idle_energy_intercept = LinearModelIdleEnergy_28[bitwidth][clock].first;
        idle_energy_slope = LinearModelIdleEnergy_28[bitwidth][clock].second;
    }
    double idle_energy = idle_energy_intercept + idle_energy_slope * depth;
    //Take into account register file double buffering
    idle_energy*=2;
    return idle_energy;
}

double getFromModelRegisterFileActiveEnergy(int bitwidth,int clock, int depth, int technology){
    double active_energy_intercept;
    double active_energy_slope;
    if(technology == 16){
        active_energy_intercept = LinearModelActiveEnergy_16[bitwidth][clock].first;
        active_energy_slope = LinearModelActiveEnergy_16[bitwidth][clock].second;
    }else{
        active_energy_intercept = LinearModelActiveEnergy_28[bitwidth][clock].first;
        active_energy_slope = LinearModelActiveEnergy_28[bitwidth][clock].second;
    }
    double active_energy = active_energy_intercept + active_energy_slope * depth;
    return active_energy;
}



